# NixOS with GNOME Desktop

A Nix Flake-based NixOS configuration with GNOME Desktop environment optimized for AMD Ryzen 7800X3D + NVIDIA RTX 4090 hardware.

This configuration uses flake-parts to organize the NixOS modules, systems and Home Manager configurations in a maintainable structure.

## Migration from Snowfall Lib to flake-parts

This repository has been migrated from Snowfall Lib to flake-parts. The migration included the following changes:

1. **Direct Module Imports**: Instead of relying on automatic module import from Snowfall Lib, modules are now explicitly imported in flake.nix
2. **Standardized Option Naming**: All module options now use the consistent `my<ModuleName>` format with camelCase
3. **Explicit Type Handling**: Better handling of conditional configurations with appropriate use of mkDefault and mkForce
4. **Clean Inputs Handling**: Simplified dependencies through direct input definitions
5. **Structured Outputs**: Using flake-parts to organize outputs by system

## Directory Structure

- `flake.nix` - Main entry point defining inputs and outputs using flake-parts
- `modules/` - Modular NixOS and Home Manager configurations
  - `nixos/` - NixOS-specific modules for system configuration
    - `base/` - Core system configuration
    - `desktop/` - GNOME desktop environment
    - `hardware/` - RTX 4090 specific configuration
    - `gui-apps/` - GUI application configurations
    - `vm/` - VM-specific configuration
    - `hardening/` - System hardening settings
    - `macos-remap/` - macOS keyboard remapping
      - `default.nix` - Main configuration
      - `xremap-config.nix` - xremap configuration
    - `ssh/` - SSH configuration
  - `home/` - Home Manager modules
    - `core-shell/` - Core shell configuration
    - `dev-shell/` - Development shell tools
    - `dotfiles/` - Chezmoi and dotfiles integration
    - `macos-remap/` - macOS keyboard remapping for Home Manager
      - `default.nix` - Main configuration
      - `dconf.nix` - GNOME dconf settings
      - `vscode-keybindings.nix` - VS Code keybindings
- `systems/` - System-specific configurations
  - `x86_64-linux/` - Linux systems for x86_64 architecture
    - `hackstation/` - Main workstation configuration
    - `vm/` - VM testing configuration
    - `server/` - Server configuration
- `homes/` - Home Manager configurations
  - `x86_64-linux/` - Linux home configurations
    - `agucova/` - User-specific home configuration

## Implementation Notes

The configuration uses flake-parts to organize outputs and simplify the structure:

1. **Clean Architecture**: All configurations are organized in a logical, consistent structure
2. **Modular Design**: Each aspect of the system is separated into its own module
3. **Per-System Outputs**: Support for different architectures with the perSystem attribute
4. **Typed Outputs**: Strong typing for all flake outputs
5. **Simplified Flake**: Clear separation between per-system and top-level outputs

## Quick Setup Guide

1. **Clone the repository**:
   ```bash
   git clone https://github.com/agucova/workspace.git ~/repos/workspace
   cd ~/repos/workspace/nixos
   ```

2. **Hardware Configuration**:
   The setup intelligently imports your system's hardware configuration from `/etc/nixos/hardware-configuration.nix` when available, and falls back to a minimal configuration for testing when it's not present.

3. **Apply the configuration**:
   ```bash
   sudo nixos-rebuild switch --flake .#hackstation --experimental-features 'nix-command flakes' --impure
   ```

   > The `--impure` flag is required to import hardware configurations from outside the flake.

## Module Design

This configuration is built with modularity in mind, with each module focused on a specific aspect of the system:

### Core System (`modules/nixos/base`)
- Optimized kernel and CPU settings for AMD Ryzen 7800X3D
- Enhanced memory and swap configuration with zram and backup swapfile
- PipeWire audio with low-latency settings
- Automatic Nix garbage collection
- Core CLI tools and shell setup
- Optimized system-wide build settings to leverage 7800X3D performance

### Desktop Environment (`modules/nixos/desktop`)
- Clean, minimal GNOME desktop environment
- Performance tuning for GNOME on Wayland
- Optimized compositor settings for gaming
- Dark theme and consistent font rendering
- Selective GNOME extensions for productivity
- Ghostty terminal with GPU acceleration
- Carefully tuned desktop experience with minimal customization

### Hardware Configuration (`modules/nixos/hardware`)
- NVIDIA RTX 4090 drivers with Wayland support
- Open-source NVIDIA drivers with proper Wayland configuration
- Hardware acceleration for video decoding/encoding
- Power management optimizations
- TPM and secure boot integration
- Multi-monitor support optimized for ultrawide displays

### VM Configuration (`modules/nixos/vm`)
- VM-specific configuration for testing
- QEMU optimization with 12 CPU cores and 8GB RAM
- CPU host passthrough for better VM performance
- Auto-login for faster testing workflows
- Simplified boot configuration for VM environments
- Debugging tools for diagnosing configuration issues

### macOS-like Keyboard Remapping (`modules/nixos/macos-remap`)
- Swaps Ctrl and Command keys for familiar macOS feel
- Implements macOS keyboard shortcuts (⌘C, ⌘V, etc.)
- Terminal and application-specific remappings
- Works with both Wayland and X11
- Based on xremap with GNOME integration
- Designed to make transition between macOS and Linux seamless

## VM Testing Workflow

Test configuration changes in a VM before applying to your main system:

```bash
# Use the app defined in the flake
nix run .#run-vm --impure

# Or build and run directly using nix
nix build .#nixosConfigurations.vm.config.system.build.vm --impure
result/bin/run-nixos-vm
```

The VM configuration:
- Uses 12 CPU cores and 8GB RAM for better performance
- Includes CPU host passthrough for optimal performance
- Features virtio-keyboard-pci and virtio-serial-pci for better input support
- Automatically logs in with the same user config as your main system
- Has the same GNOME setup and macOS-like keyboard remapping

## Creating a Bootable ISO

Create a bootable ISO with your configuration to install on new machines:

```bash
# Build the hackstation ISO
nix build .#packages.x86_64-linux.iso-hackstation --impure

# Build the VM test ISO
nix build .#packages.x86_64-linux.iso-vm --impure

# Write to USB drive (replace sdX with your USB device, be careful!)
sudo dd if=./result/iso/nixos-*.iso of=/dev/sdX bs=4M status=progress conv=fsync
```

## Home Manager Integration

The configuration uses Home Manager for user-specific settings:

- Shell configuration (Fish shell) with aliases and utilities
- Development tools and programming languages
- Git, GitHub CLI, and SSH configuration
- Modern CLI tools (lsd, starship, bat, fastfetch)
- Custom command-not-found handler with nix-index-database
- Editor configuration with Helix, NvChad, and VS Code

Home Manager can also be used standalone:

```bash
# Apply home configuration without changing system
home-manager switch --flake .#agucova@hackstation
```

## Updating Your System

```bash
# Update flake inputs
nix flake update

# Apply the updated configuration
sudo nixos-rebuild switch --flake .#hackstation --impure

# Or only update a specific input
nix flake lock --update-input nixpkgs
```

## Development Environment

The flake includes a development shell with useful Nix development tools:

```bash
# Enter dev environment
nix develop

# Check Nix code formatting
nixpkgs-fmt --check .

# Lint Nix code
statix check .
```

## flake-parts Usage

This configuration uses flake-parts to organize the flake structure:

1. **perSystem attributes**: All per-system outputs (packages, devShells) are defined in the perSystem section
2. **flake attributes**: System-wide outputs (nixosConfigurations, homeConfigurations) are defined in the flake section
3. **systems**: Defines the list of supported systems (currently only x86_64-linux)

Learn more about flake-parts at [flake.parts](https://flake.parts/)